// Generated by gencpp from file astra_camera/GetDoubleResponse.msg
// DO NOT EDIT!


#ifndef ASTRA_CAMERA_MESSAGE_GETDOUBLERESPONSE_H
#define ASTRA_CAMERA_MESSAGE_GETDOUBLERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace astra_camera
{
template <class ContainerAllocator>
struct GetDoubleResponse_
{
  typedef GetDoubleResponse_<ContainerAllocator> Type;

  GetDoubleResponse_()
    : data(0.0)
    , success(false)
    , message()  {
    }
  GetDoubleResponse_(const ContainerAllocator& _alloc)
    : data(0.0)
    , success(false)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef double _data_type;
  _data_type data;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::astra_camera::GetDoubleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::astra_camera::GetDoubleResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetDoubleResponse_

typedef ::astra_camera::GetDoubleResponse_<std::allocator<void> > GetDoubleResponse;

typedef boost::shared_ptr< ::astra_camera::GetDoubleResponse > GetDoubleResponsePtr;
typedef boost::shared_ptr< ::astra_camera::GetDoubleResponse const> GetDoubleResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::astra_camera::GetDoubleResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::astra_camera::GetDoubleResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::astra_camera::GetDoubleResponse_<ContainerAllocator1> & lhs, const ::astra_camera::GetDoubleResponse_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.success == rhs.success &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::astra_camera::GetDoubleResponse_<ContainerAllocator1> & lhs, const ::astra_camera::GetDoubleResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace astra_camera

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::astra_camera::GetDoubleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::astra_camera::GetDoubleResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::astra_camera::GetDoubleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::astra_camera::GetDoubleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::astra_camera::GetDoubleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::astra_camera::GetDoubleResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::astra_camera::GetDoubleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edb830bb55b38159c2bb5a997bcb994d";
  }

  static const char* value(const ::astra_camera::GetDoubleResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedb830bb55b38159ULL;
  static const uint64_t static_value2 = 0xc2bb5a997bcb994dULL;
};

template<class ContainerAllocator>
struct DataType< ::astra_camera::GetDoubleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "astra_camera/GetDoubleResponse";
  }

  static const char* value(const ::astra_camera::GetDoubleResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::astra_camera::GetDoubleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 data\n"
"bool success\n"
"string message\n"
"\n"
;
  }

  static const char* value(const ::astra_camera::GetDoubleResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::astra_camera::GetDoubleResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.success);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDoubleResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::astra_camera::GetDoubleResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::astra_camera::GetDoubleResponse_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<double>::stream(s, indent + "  ", v.data);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASTRA_CAMERA_MESSAGE_GETDOUBLERESPONSE_H
