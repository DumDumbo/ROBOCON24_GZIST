// Generated by gencpp from file ros_stm32_serial/serial_topic_msgs.msg
// DO NOT EDIT!


#ifndef ROS_STM32_SERIAL_MESSAGE_SERIAL_TOPIC_MSGS_H
#define ROS_STM32_SERIAL_MESSAGE_SERIAL_TOPIC_MSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_stm32_serial
{
template <class ContainerAllocator>
struct serial_topic_msgs_
{
  typedef serial_topic_msgs_<ContainerAllocator> Type;

  serial_topic_msgs_()
    : flag(0.0)
    , status(0.0)
    , linearX(0.0)
    , linearY(0.0)
    , angularZ(0.0)
    , LaserFront(0)
    , LaserL(0)
    , LaserR(0)
    , LaserRear(0)
    , Roller(0)
    , Mode(0)
    , KeepOrNot(0)
    , PlaceOrNot(0)
    , RobotStatus()  {
    }
  serial_topic_msgs_(const ContainerAllocator& _alloc)
    : flag(0.0)
    , status(0.0)
    , linearX(0.0)
    , linearY(0.0)
    , angularZ(0.0)
    , LaserFront(0)
    , LaserL(0)
    , LaserR(0)
    , LaserRear(0)
    , Roller(0)
    , Mode(0)
    , KeepOrNot(0)
    , PlaceOrNot(0)
    , RobotStatus(_alloc)  {
  (void)_alloc;
    }



   typedef double _flag_type;
  _flag_type flag;

   typedef double _status_type;
  _status_type status;

   typedef double _linearX_type;
  _linearX_type linearX;

   typedef double _linearY_type;
  _linearY_type linearY;

   typedef double _angularZ_type;
  _angularZ_type angularZ;

   typedef int32_t _LaserFront_type;
  _LaserFront_type LaserFront;

   typedef int32_t _LaserL_type;
  _LaserL_type LaserL;

   typedef int32_t _LaserR_type;
  _LaserR_type LaserR;

   typedef int32_t _LaserRear_type;
  _LaserRear_type LaserRear;

   typedef uint8_t _Roller_type;
  _Roller_type Roller;

   typedef uint8_t _Mode_type;
  _Mode_type Mode;

   typedef uint8_t _KeepOrNot_type;
  _KeepOrNot_type KeepOrNot;

   typedef uint8_t _PlaceOrNot_type;
  _PlaceOrNot_type PlaceOrNot;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _RobotStatus_type;
  _RobotStatus_type RobotStatus;





  typedef boost::shared_ptr< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct serial_topic_msgs_

typedef ::ros_stm32_serial::serial_topic_msgs_<std::allocator<void> > serial_topic_msgs;

typedef boost::shared_ptr< ::ros_stm32_serial::serial_topic_msgs > serial_topic_msgsPtr;
typedef boost::shared_ptr< ::ros_stm32_serial::serial_topic_msgs const> serial_topic_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator1> & lhs, const ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.flag == rhs.flag &&
    lhs.status == rhs.status &&
    lhs.linearX == rhs.linearX &&
    lhs.linearY == rhs.linearY &&
    lhs.angularZ == rhs.angularZ &&
    lhs.LaserFront == rhs.LaserFront &&
    lhs.LaserL == rhs.LaserL &&
    lhs.LaserR == rhs.LaserR &&
    lhs.LaserRear == rhs.LaserRear &&
    lhs.Roller == rhs.Roller &&
    lhs.Mode == rhs.Mode &&
    lhs.KeepOrNot == rhs.KeepOrNot &&
    lhs.PlaceOrNot == rhs.PlaceOrNot &&
    lhs.RobotStatus == rhs.RobotStatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator1> & lhs, const ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_stm32_serial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5bec99ac5726ba6e665cc5e4980b15b";
  }

  static const char* value(const ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5bec99ac5726ba6ULL;
  static const uint64_t static_value2 = 0xe665cc5e4980b15bULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_stm32_serial/serial_topic_msgs";
  }

  static const char* value(const ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 flag\n"
"float64 status\n"
"float64 linearX\n"
"float64 linearY\n"
"float64 angularZ\n"
"int32 LaserFront\n"
"int32 LaserL\n"
"int32 LaserR\n"
"int32 LaserRear\n"
"uint8 Roller\n"
"uint8 Mode\n"
"uint8 KeepOrNot\n"
"uint8 PlaceOrNot\n"
"string RobotStatus\n"
;
  }

  static const char* value(const ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag);
      stream.next(m.status);
      stream.next(m.linearX);
      stream.next(m.linearY);
      stream.next(m.angularZ);
      stream.next(m.LaserFront);
      stream.next(m.LaserL);
      stream.next(m.LaserR);
      stream.next(m.LaserRear);
      stream.next(m.Roller);
      stream.next(m.Mode);
      stream.next(m.KeepOrNot);
      stream.next(m.PlaceOrNot);
      stream.next(m.RobotStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct serial_topic_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_stm32_serial::serial_topic_msgs_<ContainerAllocator>& v)
  {
    s << indent << "flag: ";
    Printer<double>::stream(s, indent + "  ", v.flag);
    s << indent << "status: ";
    Printer<double>::stream(s, indent + "  ", v.status);
    s << indent << "linearX: ";
    Printer<double>::stream(s, indent + "  ", v.linearX);
    s << indent << "linearY: ";
    Printer<double>::stream(s, indent + "  ", v.linearY);
    s << indent << "angularZ: ";
    Printer<double>::stream(s, indent + "  ", v.angularZ);
    s << indent << "LaserFront: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LaserFront);
    s << indent << "LaserL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LaserL);
    s << indent << "LaserR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LaserR);
    s << indent << "LaserRear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LaserRear);
    s << indent << "Roller: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Roller);
    s << indent << "Mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Mode);
    s << indent << "KeepOrNot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.KeepOrNot);
    s << indent << "PlaceOrNot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PlaceOrNot);
    s << indent << "RobotStatus: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.RobotStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_STM32_SERIAL_MESSAGE_SERIAL_TOPIC_MSGS_H
