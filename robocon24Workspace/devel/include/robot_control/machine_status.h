// Generated by gencpp from file robot_control/machine_status.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MESSAGE_MACHINE_STATUS_H
#define ROBOT_CONTROL_MESSAGE_MACHINE_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_control
{
template <class ContainerAllocator>
struct machine_status_
{
  typedef machine_status_<ContainerAllocator> Type;

  machine_status_()
    : Roller(0)
    , Mode(0)
    , KeepOrNot(0)
    , PlaceOrNot(0)
    , RobotStatus()  {
    }
  machine_status_(const ContainerAllocator& _alloc)
    : Roller(0)
    , Mode(0)
    , KeepOrNot(0)
    , PlaceOrNot(0)
    , RobotStatus(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _Roller_type;
  _Roller_type Roller;

   typedef uint8_t _Mode_type;
  _Mode_type Mode;

   typedef uint8_t _KeepOrNot_type;
  _KeepOrNot_type KeepOrNot;

   typedef uint8_t _PlaceOrNot_type;
  _PlaceOrNot_type PlaceOrNot;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _RobotStatus_type;
  _RobotStatus_type RobotStatus;





  typedef boost::shared_ptr< ::robot_control::machine_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control::machine_status_<ContainerAllocator> const> ConstPtr;

}; // struct machine_status_

typedef ::robot_control::machine_status_<std::allocator<void> > machine_status;

typedef boost::shared_ptr< ::robot_control::machine_status > machine_statusPtr;
typedef boost::shared_ptr< ::robot_control::machine_status const> machine_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control::machine_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control::machine_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_control::machine_status_<ContainerAllocator1> & lhs, const ::robot_control::machine_status_<ContainerAllocator2> & rhs)
{
  return lhs.Roller == rhs.Roller &&
    lhs.Mode == rhs.Mode &&
    lhs.KeepOrNot == rhs.KeepOrNot &&
    lhs.PlaceOrNot == rhs.PlaceOrNot &&
    lhs.RobotStatus == rhs.RobotStatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_control::machine_status_<ContainerAllocator1> & lhs, const ::robot_control::machine_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::machine_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::machine_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control::machine_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control::machine_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::machine_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::machine_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control::machine_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "358fea0a2efe9c679e20648d6430914a";
  }

  static const char* value(const ::robot_control::machine_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x358fea0a2efe9c67ULL;
  static const uint64_t static_value2 = 0x9e20648d6430914aULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control::machine_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control/machine_status";
  }

  static const char* value(const ::robot_control::machine_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control::machine_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 Roller\n"
"uint8 Mode\n"
"uint8 KeepOrNot\n"
"uint8 PlaceOrNot\n"
"string RobotStatus\n"
;
  }

  static const char* value(const ::robot_control::machine_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control::machine_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Roller);
      stream.next(m.Mode);
      stream.next(m.KeepOrNot);
      stream.next(m.PlaceOrNot);
      stream.next(m.RobotStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct machine_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control::machine_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control::machine_status_<ContainerAllocator>& v)
  {
    s << indent << "Roller: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Roller);
    s << indent << "Mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Mode);
    s << indent << "KeepOrNot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.KeepOrNot);
    s << indent << "PlaceOrNot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PlaceOrNot);
    s << indent << "RobotStatus: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.RobotStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MESSAGE_MACHINE_STATUS_H
