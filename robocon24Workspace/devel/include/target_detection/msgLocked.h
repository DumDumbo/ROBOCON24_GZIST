// Generated by gencpp from file target_detection/msgLocked.msg
// DO NOT EDIT!


#ifndef TARGET_DETECTION_MESSAGE_MSGLOCKED_H
#define TARGET_DETECTION_MESSAGE_MSGLOCKED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace target_detection
{
template <class ContainerAllocator>
struct msgLocked_
{
  typedef msgLocked_<ContainerAllocator> Type;

  msgLocked_()
    : Class()
    , centerX(0)
    , centerY(0)
    , centerX_3(0.0)
    , centerY_3(0.0)
    , centerZ_3(0.0)
    , angleX(0.0)
    , angleY(0.0)  {
    }
  msgLocked_(const ContainerAllocator& _alloc)
    : Class(_alloc)
    , centerX(0)
    , centerY(0)
    , centerX_3(0.0)
    , centerY_3(0.0)
    , centerZ_3(0.0)
    , angleX(0.0)
    , angleY(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Class_type;
  _Class_type Class;

   typedef uint16_t _centerX_type;
  _centerX_type centerX;

   typedef uint16_t _centerY_type;
  _centerY_type centerY;

   typedef double _centerX_3_type;
  _centerX_3_type centerX_3;

   typedef double _centerY_3_type;
  _centerY_3_type centerY_3;

   typedef double _centerZ_3_type;
  _centerZ_3_type centerZ_3;

   typedef double _angleX_type;
  _angleX_type angleX;

   typedef double _angleY_type;
  _angleY_type angleY;





  typedef boost::shared_ptr< ::target_detection::msgLocked_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::target_detection::msgLocked_<ContainerAllocator> const> ConstPtr;

}; // struct msgLocked_

typedef ::target_detection::msgLocked_<std::allocator<void> > msgLocked;

typedef boost::shared_ptr< ::target_detection::msgLocked > msgLockedPtr;
typedef boost::shared_ptr< ::target_detection::msgLocked const> msgLockedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::target_detection::msgLocked_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::target_detection::msgLocked_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::target_detection::msgLocked_<ContainerAllocator1> & lhs, const ::target_detection::msgLocked_<ContainerAllocator2> & rhs)
{
  return lhs.Class == rhs.Class &&
    lhs.centerX == rhs.centerX &&
    lhs.centerY == rhs.centerY &&
    lhs.centerX_3 == rhs.centerX_3 &&
    lhs.centerY_3 == rhs.centerY_3 &&
    lhs.centerZ_3 == rhs.centerZ_3 &&
    lhs.angleX == rhs.angleX &&
    lhs.angleY == rhs.angleY;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::target_detection::msgLocked_<ContainerAllocator1> & lhs, const ::target_detection::msgLocked_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace target_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::target_detection::msgLocked_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::target_detection::msgLocked_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::target_detection::msgLocked_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::target_detection::msgLocked_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::target_detection::msgLocked_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::target_detection::msgLocked_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::target_detection::msgLocked_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d45d2d0fb3ceb83242a976ffd12f2dfc";
  }

  static const char* value(const ::target_detection::msgLocked_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd45d2d0fb3ceb832ULL;
  static const uint64_t static_value2 = 0x42a976ffd12f2dfcULL;
};

template<class ContainerAllocator>
struct DataType< ::target_detection::msgLocked_<ContainerAllocator> >
{
  static const char* value()
  {
    return "target_detection/msgLocked";
  }

  static const char* value(const ::target_detection::msgLocked_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::target_detection::msgLocked_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Class   \n"
"uint16 centerX\n"
"uint16 centerY \n"
"float64 centerX_3\n"
"float64 centerY_3\n"
"float64 centerZ_3\n"
"float64 angleX\n"
"float64 angleY\n"
;
  }

  static const char* value(const ::target_detection::msgLocked_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::target_detection::msgLocked_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Class);
      stream.next(m.centerX);
      stream.next(m.centerY);
      stream.next(m.centerX_3);
      stream.next(m.centerY_3);
      stream.next(m.centerZ_3);
      stream.next(m.angleX);
      stream.next(m.angleY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct msgLocked_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::target_detection::msgLocked_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::target_detection::msgLocked_<ContainerAllocator>& v)
  {
    s << indent << "Class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Class);
    s << indent << "centerX: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.centerX);
    s << indent << "centerY: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.centerY);
    s << indent << "centerX_3: ";
    Printer<double>::stream(s, indent + "  ", v.centerX_3);
    s << indent << "centerY_3: ";
    Printer<double>::stream(s, indent + "  ", v.centerY_3);
    s << indent << "centerZ_3: ";
    Printer<double>::stream(s, indent + "  ", v.centerZ_3);
    s << indent << "angleX: ";
    Printer<double>::stream(s, indent + "  ", v.angleX);
    s << indent << "angleY: ";
    Printer<double>::stream(s, indent + "  ", v.angleY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TARGET_DETECTION_MESSAGE_MSGLOCKED_H
